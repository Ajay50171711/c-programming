C programming language was developed in 1972 by Dennis Ritchie at bell laboratories of AT&T (American Telephone & Telegraph), located in the U.S.A.
Dennis Ritchie is known as the founder of the c language.
It was developed to overcome the problems of previous languages such as B, BCPL, etc.

-------------------------------------First c program-----------------------------------

#include <stdio.h>    
int main(){    
printf("Hello C Language\n");    
return 0;   
}
---------------------------
#include <stdio.h>: 
In this line, the program includes the standard input/output library (stdio.h) due to the preprocessor directive.
For input and output tasks, the stdio.h library contains methods like printf and scanf function

int main() { ... }:
It is the main function which is the entry point of the C program. 
The program starts executing from the beginning of the main function

printf("Hello C Language\n");:
Use the printf() function to print formatted output to the console. In this example, the string "Hello, C Language" is printed, followed by a newline character (n) which moves the pointer to the following line after the message is displayed

return 0;
When the return statement is 0, the program has been completed. When determining the state of a program, the operating system frequently uses the value returned by the main function. A return value of 0 often indicates that the execution was successful.

--------------------------------variable and data types------------------------------------------------------
Variables are named memory locations used to store data that can be modified during program execution.

Rules for variable:
Use lowercase letters, and if needed, use underscores to separate words (total_sum).
Avoid single-letter names except for counters or indices.
Variable names should not start with a digit and should not be keywords.

-----------scope of variable:

Local Variables: Declared within a function or a block. They are only accessible within that function or block.
for example:
void function() {
    int localVar = 10; // localVar is a local variable
}

Global Variables: Declared outside of any function. They are accessible throughout the entire program.
for example:
int globalVar = 20; // globalVar is a global variable
void function() {
    // globalVar can be used here
}
----------------demonstrate it-----------------------------
#include <stdio.h>

// Global variable declaration
int globalVar = 100;

void display() {
    // Local variable declaration
    int localVar = 50;
    // Printing the local variable
    printf("Local variable: %d\n", localVar);
    // Accessing the global variable
    printf("Global variable accessed inside display(): %d\n", globalVar);
}

int main() {
    // Local variable declaration in main()
    int mainVar = 10;
    
    // Printing the local variable
    printf("Local variable in main(): %d\n", mainVar);
    
    // Printing the global variable
    printf("Global variable accessed inside main(): %d\n", globalVar);
    
    // Calling the display function
    display();
    return 0;
}

  ---------------------------------------------datatype in c--------------------------------------------------
Data Types:

The data type of a variable determines that what kind of data variable can hold. Common data types in C include:
int (integer values)
float (floating-point values)
double (double-precision floating-point values)
char (single characters)

program to do--------------

#include <stdio.h>

int main() {
    // Declare and initialize an integer variable
    int age = 25;
    // Declare and initialize a float variable
    float height = 5.9f;
    // Declare and initialize a double variable
    double pi = 3.141592653589793;
    // Declare and initialize a char variable
    char initial = 'A';
    
    // Print the values of the variables
    printf("Integer variable (age): %d\n", age);
    printf("Float variable (height): %.1f\n", height);
    printf("Double variable (pi): %.15f\n", pi);
    printf("Char variable (initial): %c\n", initial);
    
    return 0;
}

----------------------------------------operators in c---------------------------------------------------------
Operators in C are special symbols that perform operations on variables and values
Their are  different types of operators in C:

-------1. Arithmetic Operators-------
These operators are used to perform basic arithmetic operations:

+ : Addition (e.g., a + b)
- : Subtraction (e.g., a - b)
* : Multiplication (e.g., a * b)
/ : Division (e.g., a / b)
% : Modulus (remainder after division) (e.g., a % b)

Example:
#include <stdio.h>

int main() {
    // Declare and initialize variables
    int a = 10;
    int b = 3;

    // Perform arithmetic operations
    int sum = a + b;            // Addition
    int difference = a - b;     // Subtraction
    int product = a * b;        // Multiplication
    int quotient = a / b;       // Division
    int remainder = a % b;      // Modulus (remainder)

    // Print the results
    printf("The value of a: %d\n", a);
    printf("The value of b: %d\n", b);
    printf("Sum (a + b): %d\n", sum);
    printf("Difference (a - b): %d\n", difference);
    printf("Product (a * b): %d\n", product);
    printf("Quotient (a / b): %d\n", quotient);
    printf("Remainder (a % b): %d\n", remainder);  

    return 0;
}


    -----------------------------2. Relational Operators---------------------------------------------
These operators are used to compare two values and return a boolean result (true or false):

== : Equal to (e.g., a == b)
!= : Not equal to (e.g., a != b)
> : Greater than (e.g., a > b)
< : Less than (e.g., a < b)
>= : Greater than or equal to (e.g., a >= b)
<= : Less than or equal to (e.g., a <= b)

Example:
#include <stdio.h>

int main() {
    // Declare and initialize variables
    int a = 10;
    int b = 5;

    // Perform relational operations
    int equal = (a == b);        // Equal to
    int not_equal = (a != b);    // Not equal to
    int greater_than = (a > b); // Greater than
    int less_than = (a < b);    // Less than
    int greater_or_equal = (a >= b); // Greater than or equal to
    int less_or_equal = (a <= b);    // Less than or equal to

    // Print the results
    printf("a = %d\n", a);
    printf("b = %d\n", b);
    printf("a == b: %d\n", equal);           // Output will be 0 (false)
    printf("a != b: %d\n", not_equal);       // Output will be 1 (true)
    printf("a > b: %d\n", greater_than);    // Output will be 1 (true)
    printf("a < b: %d\n", less_than);       // Output will be 0 (false)
    printf("a >= b: %d\n", greater_or_equal); // Output will be 1 (true)
    printf("a <= b: %d\n", less_or_equal);   // Output will be 0 (false)

    return 0;
}

       ---------------------------------3. Logical Operators----------------------------------
These operators are used to perform logical operations and combine multiple conditions:

&& : Logical AND (e.g., (a > b) && (b > c))
|| : Logical OR (e.g., (a > b) || (b > c))
! : Logical NOT (e.g., !(a > b))

Example:
#include <stdio.h>

int main() {
    // Declare and initialize variables
    int a = 10;
    int b = 5;
    int c = 20;

    // Perform logical operations
    int and_result = (a > b) && (b < c);  // Logical AND
    int or_result = (a > b) || (b > c);   // Logical OR
    int not_result = !(a < b);            // Logical NOT

    // Print the results
    printf("a = %d\n", a);
    printf("b = %d\n", b);
    printf("c = %d\n", c);

    // Logical AND: Both conditions must be true
    printf("Result of (a > b) && (b < c): %d\n", and_result); // Output will be 1 (true)

    // Logical OR: At least one condition must be true
    printf("Result of (a > b) || (b > c): %d\n", or_result);  // Output will be 1 (true)

    // Logical NOT: Negates the result of the condition
    printf("Result of !(a < b): %d\n", not_result);           // Output will be 1 (true)

    return 0;
}


            ------------------4. Assignment Operators----------------         
These operators are used to assign values to variables:

= : Assignment (e.g., a = 5)
+= : Addition assignment (e.g., a += 5 which is equivalent to a = a + 5)
-= : Subtraction assignment (e.g., a -= 5 which is equivalent to a = a - 5)
*= : Multiplication assignment (e.g., a *= 5 which is equivalent to a = a * 5)
/= : Division assignment (e.g., a /= 5 which is equivalent to a = a / 5)
%= : Modulus assignment (e.g., a %= 5 which is equivalent to a = a % 5)


Example:
#include <stdio.h>

int main() {
    // Declare and initialize variables
    int a = 10;
 printf("The value of a is  = %d\n", a);
    // Perform various assignment operations
    a += 5;  // Equivalent to a = a + 5
    printf("After a += 5, a = %d\n", a);

    a -= 3;  // Equivalent to a = a - 3
    printf("After a -= 3, a = %d\n", a);

    a *= 2;  // Equivalent to a = a * 2
    printf("After a *= 2, a = %d\n", a);

    a /= 4;  // Equivalent to a = a / 4
    printf("After a /= 4, a = %d\n", a);

    a %= 3;  // Equivalent to a = a % 3
    printf("After a %= 3, a = %d\n", a);

    return 0;
}

        ---------------------------- 5. Increment and Decrement Operators------------------------
These operators are used to increment or decrement the value of a variable by one:

++ : Increment (e.g., a++ or ++a)
-- : Decrement (e.g., a-- or --a)

Example:
#include <stdio.h>

int main() {
    // Declare and initialize variable
    int a = 10;

    // Demonstrate post-increment
    printf("Initial value of a: %d\n", a);
    printf("Post-increment (a++): %d\n", a++); // Value before increment
    printf("Value of a after post-increment: %d\n", a); // Value after increment

    // Demonstrate pre-increment
    a = 10; // Reset value of a
    printf("Value of a: %d\n", a);
    printf("Pre-increment (++a): %d\n", ++a); // Value after increment
    printf("Value of a after pre-increment: %d\n", a); // Value after increment

    // Demonstrate post-decrement
    a = 10; // Reset value of a
    printf("Value of a: %d\n", a);
    printf("Post-decrement (a--): %d\n", a--); // Value before decrement
    printf("Value of a after post-decrement: %d\n", a); // Value after decrement

    // Demonstrate pre-decrement
    a = 10; // Reset value of a
    printf("Value of a: %d\n", a);
    printf("Pre-decrement (--a): %d\n", --a); // Value after decrement
    printf("Value of a after pre-decrement: %d\n", a); // Value after decrement

    return 0;
}

   --------------------------------------Bitwise Operators-------------------------------------------
These operators perform bit-level operations:

& : Bitwise AND (e.g., a & b)
| : Bitwise OR (e.g., a | b)
^ : Bitwise XOR (e.g., a ^ b)
~ : Bitwise NOT (e.g., ~a)
<< : Left shift (e.g., a << 2)
>> : Right shift (e.g., a >> 2)

Example:
#include <stdio.h>
//do it with free mind 
int main() {
    // Declare and initialize variables
    int a = 60;   // Binary: 0011 1100
    int b = 13;   // Binary: 0000 1101

    // Perform bitwise operations
    int bitwise_and = a & b;     // Bitwise AND
    int bitwise_or = a | b;      // Bitwise OR
    int bitwise_xor = a ^ b;     // Bitwise XOR
    int bitwise_not_a = ~a;      // Bitwise NOT
    int left_shift = a << 2;    // Left shift
    int right_shift = a >> 2;   // Right shift

    // Print the results
    printf("a = %d (Binary: %08b)\n", a, a);
    printf("b = %d (Binary: %08b)\n", b, b);
    
    printf("Bitwise AND (a & b): %d (Binary: %08b)\n", bitwise_and, bitwise_and);
    printf("Bitwise OR (a | b): %d (Binary: %08b)\n", bitwise_or, bitwise_or);
    printf("Bitwise XOR (a ^ b): %d (Binary: %08b)\n", bitwise_xor, bitwise_xor);
    printf("Bitwise NOT (~a): %d (Binary: %08b)\n", bitwise_not_a, bitwise_not_a);
    printf("Left Shift (a << 2): %d (Binary: %08b)\n", left_shift, left_shift);
    printf("Right Shift (a >> 2): %d (Binary: %08b)\n", right_shift, right_shift);

    return 0;
}

---------------------------------------ternary operator----------------------------------------------------
     ------short form of if else statement 
#include <stdio.h> 
  
int main() 
{ 
    int m = 5, n = 4; 
  
    (m > n) ? printf("m is greater than n that is %d > %d", 
                     m, n) 
            : printf("n is greater than m that is %d > %d", 
                     n, m); 
  
    return 0; 
}

-----------------------Decision Making statement-----------

1. if Statement
The if statement executes a block of code if a specified condition is true.
example:


#include <stdio.h>

int main() {
    int x = 10;
    
    if (x > 5) {
        printf("x is greater than 5\n");
    }

    return 0;
}

2. if-else Statement
The if-else statement allows you to execute one block of code if a condition is true, and another block of code if it is false.


Example:

#include <stdio.h>

int main() {
    int x = 4;

    if (x > 5) {
        printf("x is greater than 5\n");
    } else {
        printf("x is less than or equal to 5\n");
    }

    return 0;
}

3. else-if Ladder
The else-if ladder is used to check multiple conditions.

example:


#include <stdio.h>

int main() {
    int score = 85;

    if (score >= 90) {
        printf("Grade: A\n");
    } else if (score >= 80) {
        printf("Grade: B\n");
    } else if (score >= 70) {
        printf("Grade: C\n");
    } else if (score >= 60) {
        printf("Grade: D\n");
    } else {
        printf("Grade: F\n");
    }

    return 0;
}


4. switch Statement
The switch statement is used when you need to select one of many code blocks to be executed.

Example:

#include <stdio.h>

int main() {
    int day;

    // Prompt the user to enter a day number
    printf("Enter a day number (1-7): ");
    scanf("%d", &day);

    // Switch statement to determine the day of the week
    switch(day) {
        case 1:
            printf("Monday\n");
            break;
        case 2:
            printf("Tuesday\n");
            break;
        case 3:
            printf("Wednesday\n");
            break;
        case 4:
            printf("Thursday\n");
            break;
        case 5:
            printf("Friday\n");
            break;
        case 6:
            printf("Saturday\n");
            break;
        case 7:
            printf("Sunday\n");
            break;
        default:
            printf("Invalid day number! Please enter a number between 1 and 7.\n");
    }

    return 0;
}

-----------------------Loop------------------

Loops in C allow you to repeat a block of code multiple times. The main types of loops in C are:

1)for loop
2)while loop
3)do-while loop

1. for Loop
The for loop is used when the number of iterations is known.

Example:

#include <stdio.h>

int main() {
    int i;

    for (i = 1; i <= 5; i++) {
        printf("Iteration %d\n", i);
    }

    return 0;
}

2. while Loop
The while loop repeats a block of code as long as a specified condition is true.

Example:
#include <stdio.h>

int main() {
    int i = 1;

    while (i <= 5) {
        printf("Iteration %d\n", i);
        i++;  // increment the counter
    }

    return 0;
}

3. do-while Loop
The do-while loop is similar to the while loop, but it guarantees that the code block will be executed at least once, even if the condition is false.

#include <stdio.h>

int main() {
    int i = 1;

    do {
        printf("Iteration %d\n", i);
        i++;
    } while (i <= 5);

    return 0;
}

Break and Continue Statements
break: Exits the loop entirely.
continue: Skips the current iteration and proceeds to the next one.

Example:
#include <stdio.h>

int main() {
    int i;

    for (i = 1; i <= 10; i++) {
        if (i == 5) {
            continue;  // skip iteration when i equals 5
        }
        if (i == 8) {
            break;  // exit the loop when i equals 8
        }
        printf("Iteration %d\n", i);
    }

    return 0;
}

--------------------------------------------Function in c---------------------------------------------
 function: A function is a block of code which only runs when it is called.

Syntax of Functions in C
The syntax of function can be divided into 3 aspects:

Function Declaration
Function Definition
Function Calls

Function Declarations
In a function declaration, we must provide the function name, its return type, and the number and type of its parameters.
A function declaration tells the compiler that there is a function with the given name defined somewhere else in the program.
i.g:- int sum(int a, int b);


Function Definition
The function definition consists of actual statements which are executed when the function is called 
function definition always starts with the function declaration so we do not need to declare it explicitly
i.g:-
int add(int a, int b) {
    return a + b;
}

Function Call
A function call is a statement that instructs the compiler to execute the function. We use the function name and parameters in the function call.
    result = add(5, 3);
    printf("The sum is: %d\n", result);

a program with a function----------------------

#include <stdio.h>

// Function declaration
int add(int a, int b);

// Function definition
int add(int a, int b) {
    return a + b;
}

int main() {
    int result;

    // Function call
    result = add(5, 3);
    printf("The sum is: %d\n", result);

    return 0;
}

Types of Functions--------------------------------
There are two types of functions in C:

1) Library Functions (built-in function)
2) User Defined Functions

1. Library Function
A library function is also referred to as a “built-in function”. A compiler package already exists that contains these functions, each of which has a specific meaning and is included in the package. Built-in functions have the advantage of being directly usable without being defined, whereas user-defined functions must be declared and defined before being used

For Example:
pow(), sqrt() etc

// C program to implement
// the above approach
#include <math.h>
#include <stdio.h>

int main()
{
  double Number;
  Number = 49;

  double squareRoot = sqrt(Number);
  
  printf("The Square root of %.2lf = %.2lf", 
          Number, squareRoot);
  return 0;
}


2. User Defined Function
Functions that the programmer creates are known as User-Defined functions or “tailor-made functions”. User-defined functions can be improved and modified according to the need of the programmer. Whenever we write a function that is case-specific and is not defined in any header file, we need to declare and define our own functions according to the syntax

// C program to show 
// user-defined functions
#include <stdio.h>

int sum(int a, int b) 
{ 
  return a + b; 
}

int main()
{
  int a = 30, b = 40;

  int res = sum(a, b);

  printf("Sum is: %d", res);
  return 0;
}

Passing Parameters to Functions

We can pass arguments to the C function in two ways:

1)Pass by Value
2)Pass by Reference

1. Pass by Value
Parameter passing in this method copies values from actual parameters into formal function parameters. As a result, any changes made inside the functions do not reflect in the caller’s parameters. 

Example:
// C program to show use 
// of call by value
#include <stdio.h>

void swap(int var1, int var2)
{
  int temp = var1;
  var1 = var2;
  var2 = temp;
}

int main()
{
  int var1 = 3, var2 = 2;
  printf("Before swap Value of var1 and var2 is: %d, %d\n",
          var1, var2);
  swap(var1, var2);
  printf("After swap Value of var1 and var2 is: %d, %d",
          var1, var2);
  return 0;
}

Output
Before swap Value of var1 and var2 is: 3, 2
After swap Value of var1 and var2 is: 3, 2

2. Pass by Reference
The caller’s actual parameters and the function’s actual parameters refer to the same locations, so any changes made inside the function are reflected in the caller’s actual parameters. 

Example:
// C program to show use of 
// call by Reference
#include <stdio.h>

void swap(int *var1, int *var2)
{
  int temp = *var1;
  *var1 = *var2;
  *var2 = temp;
}


int main()
{
  int var1 = 3, var2 = 2;
  printf("Before swap Value of var1 and var2 is: %d, %d\n",
          var1, var2);
  swap(&var1, &var2);
  printf("After swap Value of var1 and var2 is: %d, %d",
          var1, var2);
  return 0;
}

Output
Before swap Value of var1 and var2 is: 3, 2
After swap Value of var1 and var2 is: 2, 3

-----------------------------------------------------------------------Array------------------------------------------------------------------------------------------
What is an Array?
An array in C is a collection of variables of the same data type stored at contiguous memory locations. Instead of declaring multiple variables for each piece of data, you can use an array to group them together.

Imagine an array as a series of boxes (memory locations), where each box can store a single value, but all boxes are of the same type (e.g., all integers or all characters). Each of these boxes is called an "element" of the array, and you can access them using an index.

Basic Structure of an Array----------

Here's a simple syntax for declaring an array:
data_type array_name[size];

1)data_type is the type of data (like int, float, char, etc.).
2)array_name is the name of the array.
3)size is the number of elements the array can hold.

Example: Declaring and Initializing an Array
Let's start with a basic example:

#include <stdio.h>

int main() {
    // Declare an array of integers with size 5
    int numbers[5];

    // Initialize the array
    numbers[0] = 10;
    numbers[1] = 20;
    numbers[2] = 30;
    numbers[3] = 40;
    numbers[4] = 50;

    // Accessing and printing the array elements
    printf("First element: %d\n", numbers[0]);
    printf("Second element: %d\n", numbers[1]);
    printf("Third element: %d\n", numbers[2]);

    return 0;
}

Explanation:
Declaration: int numbers[5]; declares an array of 5 integers.
Initialization: Elements are initialized one by one using their index, starting from 0.
Accessing Elements: You can access each element using its index, like numbers[0] for the first element, numbers[1] for the second, and so on.
Points to Remember:
Indexing: Array indexing starts from 0. So, in an array of size 5, the valid indices are 0 to 4.
Fixed Size: Once an array is declared with a certain size, it cannot grow or shrink. You must specify the size when declaring the array.
Contiguous Memory: Elements of an array are stored in consecutive memory locations.
--------------------------------------------------------------

Initializing Arrays at Declaration
You can also initialize an array at the time of declaration:

int numbers[5] = {10, 20, 30, 40, 50};

---------------------------------------------------------------
You can even let the compiler determine the size by leaving it out:

int numbers[] = {10, 20, 30, 40, 50};
In this case, the compiler will automatically set the size to 5, based on the number of elements in the initializer list.
-----------------------------------------------------------------------------------------------------
You can also modify an element by assigning a new value:

numbers[1] = 100;  // Changing the second element (index 1) to 100
--------------------------------------------------------------------------------------------------
Using Arrays in Loops:
Arrays are often used in combination with loops to perform repetitive tasks efficiently. For example, you can use a loop to iterate over all elements of an array:

#include <stdio.h>

int main() {
    int numbers[] = {10, 20, 30, 40, 50};
    int size = sizeof(numbers) / sizeof(numbers[0]);  // Calculate the size of the array  
//in this as the size of int is 4 bit so the sizeof(numbers) = 20 and sizeof(numbers[0])=4 so the size of array = 5

    // Loop through the array and print each element
    for (int i = 0; i < size; i++) {
        printf("Element at index %d is: %d\n", i, numbers[i]);
    }

    return 0;
}
Explanation:
sizeof(numbers) / sizeof(numbers[0]): This calculates the size of the array by dividing the total memory occupied by the array (sizeof(numbers)) by the size of a single element (sizeof(numbers[0])).
Loop: The for loop iterates through the array and prints each element.
--------------------------------------------------------------------------------------------------------------------------------------------------
Multi-Dimensional Arrays
Arrays can have more than one dimension. A common example is a 2D array, which you can think of as an array of arrays (like a table with rows and columns).

#include <stdio.h>

int main() {
    // Declare and initialize a 2D array
    int matrix[2][3] = {
        {1, 2, 3},
        {4, 5, 6}
    };

    // Access and print elements of the 2D array
    printf("Element at (0, 0): %d\n", matrix[0][0]);
    printf("Element at (1, 2): %d\n", matrix[1][2]);

    return 0;
}

Explanation:
Declaration: int matrix[2][3]; declares a 2D array with 2 rows and 3 columns.
Initialization: Elements are initialized row by row.
Accessing Elements: You use two indices to access an element: matrix[row][column].

------------------------------------------------------------------String in c --------------------------------------------------------------------------------------


































